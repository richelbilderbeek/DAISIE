{
    "collab_server" : "",
    "contents" : "DAISIE_loglik_all_choosepar = function(trparsopt,trparsfix,idparsopt,idparsfix,idparsnoshift,idparseq,pars2,datalist,methode)\n{\n   if(sum(idparsnoshift == (6:10)) != 5)\n   {\n       trpars1 = rep(0,10)\n   } else {\n       trpars1 = rep(0,5)\n   }\n   trpars1[idparsopt] = trparsopt\n   if(length(idparsfix) != 0)\n   {\n      trpars1[idparsfix] = trparsfix\n   }\n   if(sum(idparsnoshift == (6:10)) != 5)\n   {\n      trpars1[idparsnoshift] = trpars1[idparsnoshift - 5]\n   }\n   if(max(trpars1) > 1 | min(trpars1) < 0)\n   {\n      loglik = -Inf\n   } else {\n      pars1 = trpars1/(1 - trpars1)\n      if(pars2[5] > 0)\n      {\n         pars1 = DAISIE_eq(datalist,pars1,pars2)\n         if(sum(idparsnoshift == (6:10)) != 5)\n         {\n             pars1[idparsnoshift] = pars1[idparsnoshift - 5]\n         }\n      }\n      if(min(pars1) < 0)\n      {\n         loglik = -Inf\n      } else {\n         loglik = DAISIE_loglik_all(pars1,pars2,datalist,methode)\n      }\n      if(is.nan(loglik) || is.na(loglik))\n      {\n         cat(\"There are parameter values used which cause numerical problems.\\n\")\n         loglik = -Inf\n      }\n   }\n   return(loglik)\n}\n\nDAISIE_ML = function(datalist,initparsopt,idparsopt,parsfix,idparsfix,idparsnoshift = 6:10, res = 100, ddmodel = 0, cond = 0, eqmodel = 0, x_E = 0.95, x_I = 0.98, tol = c(1E-4, 1E-5, 1E-7), maxiter = 1000 * round((1.25)^length(idparsopt)), methode = \"lsodes\",optimmethod = 'subplex')\n{\n# datalist = list of all data: branching times, status of clade, and numnber of missing species\n# datalist[[,]][1] = list of branching times (positive, from present to past)\n# - max(brts) = age of the island\n# - next largest brts = stem age / time of divergence from the mainland\n# The interpretation of this depends on stac (see below)\n# For stac = 0, this needs to be specified only once.\n# For stac = 1, this is the time since divergence from the immigrant's sister on the mainland.\n# The immigrant must have immigrated at some point since then.\n# For stac = 2 and stac = 3, this is the time since divergence from the mainland.\n# The immigrant that established the clade on the island must have immigrated precisely at this point.\n# For stac = 3, it must have reimmigrated, but only after the first immigrant had undergone speciation.\n# - min(brts) = most recent branching time (only for stac = 2, or stac = 3)\n# datalist[[,]][2] = list of status of the clades formed by the immigrant\n#  . stac == 0 : immigrant is not present and has not formed an extant clade\n# Instead of a list of zeros, here a number must be given with the number of clades having stac = 0\n#  . stac == 1 : immigrant is present but has not formed an extant clade\n#  . stac == 2 : immigrant is not present but has formed an extant clade\n#  . stac == 3 : immigrant is present and has formed an extant clade\n# datalist[[,]][3] = list with number of missing species in clades for stac = 2 and stac = 3;\n# for stac = 0 and stac = 1, this number equals 0.\n# initparsopt, parsfix = optimized and fixed model parameters\n# - pars1[1] = lac = (initial) cladogenesis rate\n# - pars1[2] = mu = extinction rate\n# - pars1[3] = K = maximum number of species possible in the clade\n# - pars1[4] = gam = (initial) immigration rate\n# - pars1[5] = laa = (initial) anagenesis rate\n# - pars1[6]...pars1[10] = same as pars1[1]...pars1[5], but for a second type of immigrant\n# - pars1[11] = proportion of type 2 immigrants in species pool\n# idparsopt, idparsfix = ids of optimized and fixed model parameters\n# - res = pars2[1] = lx = length of ODE variable x\n# - ddmodel = pars2[2] = diversity-dependent model,mode of diversity-dependence\n#  . ddmodel == 0 : no diversity-dependence\n#  . ddmodel == 1 : linear dependence in speciation rate (anagenesis and cladogenesis)\n#  . ddmodel == 11 : linear dependence in speciation rate and immigration rate\n#  . ddmodel == 3 : linear dependence in extinction rate\n# - cond = conditioning; currently only cond = 0 is possible\n#  . cond == 0 : no conditioning\n#  . cond == 1 : conditioning on presence on the island\n# - eqmodel = equilibrium model\n#  . eqmodel = 0 : no equilibrium is assumed\n#  . eqmodel = 1 : equilibrium is assumed on deterministic equation for total number of species\n#  . eqmodel = 2 : equilibrium is assumed on total number of species using deterministic equation for endemics and immigrants\n#  . eqmodel = 3 : equilibrium is assumed on endemics using deterministic equation for endemics and immigrants\n#  . eqmodel = 4 : equilibrium is assumed on immigrants using deterministic equation for endemics and immigrants\n#  . eqmodel = 5 : equilibrium is assumed on endemics and immigrants using deterministic equation for endemics and immigrants\n\noptions(warn=-1)\nidparseq = c()\nif(eqmodel == 1 | eqmodel == 3 | eqmodel == 13)\n{\n   idparseq = 2\n}\nif(eqmodel == 2 | eqmodel == 4)\n{\n   idparseq = 4\n}\nif(eqmodel == 5 | eqmodel == 15)\n{\n   idparseq = c(2,4)\n}\n\nidpars = sort(c(idparsopt,idparsfix,idparsnoshift,idparseq))\n#print(idpars)\nmissnumspec = unlist(lapply(datalist,function(list) {list$missing_species}))\nif(sum(missnumspec) > (res - 1))\n{\n   cat(\"The number of missing species is too large relative to the resolution of the ODE.\\n\")\n   out2 = data.frame(lambda_c = -1, mu = -1,K = -1, gamma = -1, lambda_a = -1, loglik = -1, df = -1, conv = -1)\n} else {\n  if((sum(idpars == (1:10)) != 10) || (length(initparsopt) != length(idparsopt)) || (length(parsfix) != length(idparsfix)))\n  {\n     cat(\"The parameters to be optimized and/or fixed are incoherent.\\n\")\n     out2 = data.frame(lambda_c = -1, mu = -1,K = -1, gamma = -1, lambda_a = -1, loglik = -1, df = -1, conv = -1)\n  } else {\n    if(length(idparsopt) > 11)\n    {\n       cat(\"The number of parameters to be optimized is too high.\\n\")\n       out2 = data.frame(lambda_c = -1, mu = -1,K = -1, gamma = -1, lambda_a = -1, loglik = -1, df = -1, conv = -1)\n    } else {\n      namepars = c(\"lambda_c\",\"mu\",\"K\",\"gamma\",\"lambda_a\",\"lambda_c2\",\"mu2\",\"K2\",\"gamma2\",\"lambda_a2\",\"prop_type2\")\n      if(length(namepars[idparsopt]) == 0) { optstr = \"nothing\" } else { optstr = namepars[idparsopt] }\n      cat(\"You are optimizing\",optstr,\"\\n\")\n      if(length(namepars[idparsfix]) == 0) { fixstr = \"nothing\" } else { fixstr = namepars[idparsfix] }\n      cat(\"You are fixing\",fixstr,\"\\n\")\n      if(sum(idparsnoshift == (6:10)) != 5)\n      {\n         noshiftstring = namepars[idparsnoshift]\n         cat(\"You are not shifting\",noshiftstring,\"\\n\")\n      }\n      if(length(idparseq) == 0)\n      {\n         #cat(\"You are not assuming equilibrium\\n\")\n      } else {\n         if(ddmodel == 3)\n         {\n            cat(\"Equilibrium optimization is not implemented for ddmodel = 3\\n\")\n         } else {\n            cat(\"You are assuming equilibrium. Extinction and/or immigration will be considered a function of the other parameters, the species pool size, the number of endemics, and/or the number of non-endemics\\n\")\n         }\n      }\n      cat(\"Calculating the likelihood for the initial parameters.\",\"\\n\")\n      flush.console()\n      trparsopt = initparsopt/(1 + initparsopt)\n      trparsopt[which(initparsopt == Inf)] = 1\n      trparsfix = parsfix/(1 + parsfix)\n      trparsfix[which(parsfix == Inf)] = 1\n      pars2 = c(res,ddmodel,cond,0,eqmodel,tol,maxiter,x_E,x_I)\n      optimpars = c(tol,maxiter)\n      initloglik = DAISIE_loglik_all_choosepar(trparsopt = trparsopt,trparsfix = trparsfix,idparsopt = idparsopt,idparsfix = idparsfix,idparsnoshift = idparsnoshift,idparseq = idparseq, pars2 = pars2,datalist = datalist,methode)\n      cat(\"The loglikelihood for the initial parameter values is\",initloglik,\"\\n\")\n      if(initloglik == -Inf)\n      {\n         cat(\"The initial parameter values have a likelihood that is equal to 0 or below machine precision. Try again with different initial values.\\n\")\n         out2 = data.frame(lambda_c = -1, mu = -1,K = -1, gamma = -1, lambda_a = -1, loglik = -1, df = -1, conv = -1)\n      } else {\n        cat(\"Optimizing the likelihood - this may take a while.\",\"\\n\")\n        flush.console()\n        out = DDD::optimizer(optimmethod = optimmethod,optimpars = optimpars,fun = DAISIE_loglik_all_choosepar,trparsopt = trparsopt,idparsopt = idparsopt,trparsfix = trparsfix,idparsfix = idparsfix,idparsnoshift = idparsnoshift,idparseq = idparseq,pars2 = pars2,datalist = datalist,methode = methode)        \n        if(out$conv != 0)\n        {\n           cat(\"Optimization has not converged. Try again with different initial values.\\n\")\n           out2 = data.frame(lambda_c = -1, mu = -1,K = -1, gamma = -1, lambda_a = -1, loglik = -1, df = -1, conv = -1)\n        } else {\n          MLtrpars = as.numeric(unlist(out$par))\n          MLpars = MLtrpars/(1-MLtrpars)\n          ML = as.numeric(unlist(out$fvalues))\n          if(sum(idparsnoshift == (6:10)) != 5)\n          {\n              MLpars1 = rep(0,10)\n          } else {\n              MLpars1 = rep(0,5)\n          }\n          MLpars1[idparsopt] = MLpars\n          if(length(idparsfix) != 0) { MLpars1[idparsfix] = parsfix }\n          if(eqmodel > 0)\n          {\n              MLpars1 = DAISIE_eq(datalist,MLpars1,pars2)\n          }\n          if(MLpars1[3] > 10^7){ MLpars1[3] = Inf }\n          if(sum(idparsnoshift == (6:10)) != 5)\n          {\n              if(length(idparsnoshift) != 0) { MLpars1[idparsnoshift] = MLpars1[idparsnoshift - 5] }\n              if(MLpars1[8] > 10^7){ MLpars1[8] = Inf }\n              out2 = data.frame(lambda_c = MLpars1[1], mu = MLpars1[2], K = MLpars1[3], gamma = MLpars1[4], lambda_a = MLpars1[5], lambda_c2 = MLpars1[6], mu2 = MLpars1[7], K2 = MLpars1[8], gamma2 = MLpars1[9], lambda_a2 = MLpars1[10], prop_type2 = MLpars1[11], loglik = ML, df = length(initparsopt), conv = unlist(out$conv))\n              s1 = sprintf('Maximum likelihood parameter estimates: lambda_c: %f, mu: %f, K: %f, gamma: %f, lambda_a: %f, lambda_c2: %f, mu2: %f, K2: %f, gamma2: %f, lambda_a2: %f, prop_type2: %f',MLpars1[1],MLpars1[2],MLpars1[3],MLpars1[4],MLpars1[5],MLpars1[6],MLpars1[7],MLpars1[8],MLpars1[9],MLpars1[10],MLpars1[11])\n          } else {\n              out2 = data.frame(lambda_c = MLpars1[1], mu = MLpars1[2], K = MLpars1[3], gamma = MLpars1[4], lambda_a = MLpars1[5], loglik = ML, df = length(initparsopt), conv = unlist(out$conv))\n              s1 = sprintf('Maximum likelihood parameter estimates: lambda_c: %f, mu: %f, K: %f, gamma: %f, lambda_a: %f',MLpars1[1],MLpars1[2],MLpars1[3],MLpars1[4],MLpars1[5])\n          }\n          s2 = sprintf('Maximum loglikelihood: %f',ML)\n          cat(\"\\n\",s1,\"\\n\",s2,\"\\n\")\n          if(eqmodel > 0)\n          {\n              M = calcMN(datalist,MLpars1)\n              ExpEIN = DAISIE_ExpEIN(datalist[[1]]$island_age,MLpars1,M)\n              cat(\"The expected number of endemics, non-endemics, and the total at these parameters is: \", ExpEIN[[1]], ExpEIN[[2]],ExpEIN[[3]])\n          }\n        }\n      }\n    }\n  }\n}\ninvisible(out2)\n}",
    "created" : 1478702214794.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1629329342",
    "id" : "A669BB61",
    "lastKnownWriteTime" : 1478705366,
    "last_content_update" : 1478705366896,
    "path" : "D:/data/Ms/DAISIE/DAISIE/R/DAISIE_ML.R",
    "project_path" : "R/DAISIE_ML.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}